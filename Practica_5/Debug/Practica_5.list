
Practica_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800467c  0800467c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004684  08004684  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800468c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000808  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000081c  2000081c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001084e  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002467  00000000  00000000  000308d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a07  00000000  00000000  00033a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000243dc  00000000  00000000  0003444f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f84a  00000000  00000000  0005882b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da286  00000000  00000000  00068075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003664  00000000  00000000  001422fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00145960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800463c 	.word	0x0800463c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	0800463c 	.word	0x0800463c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <turnOnLed1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turnOnLed1(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <turnOnLed1+0x30>)
 8000502:	f001 fec7 	bl	8002294 <HAL_GPIO_WritePin>
	if(uartEnabled && uartGetState()==HAL_UART_STATE_READY) uartSendString((uint8_t*)buttonPressedMsg);
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <turnOnLed1+0x34>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d009      	beq.n	8000522 <turnOnLed1+0x2a>
 800050e:	f000 fe7b 	bl	8001208 <uartGetState>
 8000512:	4603      	mov	r3, r0
 8000514:	2b20      	cmp	r3, #32
 8000516:	d104      	bne.n	8000522 <turnOnLed1+0x2a>
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <turnOnLed1+0x38>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fe59 	bl	80011d4 <uartSendString>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400
 800052c:	2000078c 	.word	0x2000078c
 8000530:	20000000 	.word	0x20000000

08000534 <turnOffLed1>:

void turnOffLed1(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <turnOffLed1+0x14>)
 800053e:	f001 fea9 	bl	8002294 <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fe6e 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f836 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f91a 	bl	8000790 <MX_GPIO_Init>
  MX_ETH_Init();
 800055c:	f000 f89c 	bl	8000698 <MX_ETH_Init>
  //Ya hago esto en la API.
  //MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
 8000560:	f000 f8e8 	bl	8000734 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  setGetCurrentTickFunction(HAL_GetTick);
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x60>)
 8000566:	f000 fbcd 	bl	8000d04 <setGetCurrentTickFunction>
  usrButtonDebounce.onButtonPressed = turnOnLed1;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <main+0x64>)
 800056c:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <main+0x68>)
 800056e:	621a      	str	r2, [r3, #32]
  usrButtonDebounce.onButtonReleased = turnOffLed1;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0x64>)
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <main+0x6c>)
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  usrButtonDebounce.pin = USER_Btn_Pin;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <main+0x64>)
 8000578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057c:	811a      	strh	r2, [r3, #8]
  usrButtonDebounce.port = USER_Btn_GPIO_Port;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0x64>)
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <main+0x70>)
 8000582:	605a      	str	r2, [r3, #4]
  debounceFSM_init(&usrButtonDebounce, 50, false);
 8000584:	2200      	movs	r2, #0
 8000586:	2132      	movs	r1, #50	; 0x32
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <main+0x64>)
 800058a:	f000 fc83 	bl	8000e94 <debounceFSM_init>
  uartEnabled = uartInit(9600, 8, 0, 0);
 800058e:	2300      	movs	r3, #0
 8000590:	2200      	movs	r2, #0
 8000592:	2108      	movs	r1, #8
 8000594:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000598:	f000 fdb2 	bl	8001100 <uartInit>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <main+0x74>)
 80005a2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	debounceFSM_update(&usrButtonDebounce);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <main+0x64>)
 80005a6:	f000 fca1 	bl	8000eec <debounceFSM_update>
 80005aa:	e7fb      	b.n	80005a4 <main+0x58>
 80005ac:	080012fd 	.word	0x080012fd
 80005b0:	20000764 	.word	0x20000764
 80005b4:	080004f9 	.word	0x080004f9
 80005b8:	08000535 	.word	0x08000535
 80005bc:	40020800 	.word	0x40020800
 80005c0:	2000078c 	.word	0x2000078c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 f806 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ff59 	bl	8002500 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f94a 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f9ba 	bl	80029f0 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f933 	bl	80008ec <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ETH_Init+0x84>)
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <MX_ETH_Init+0x88>)
 80006a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_ETH_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ETH_Init+0x8c>)
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_ETH_Init+0x8c>)
 80006b0:	22e1      	movs	r2, #225	; 0xe1
 80006b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_ETH_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_ETH_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_ETH_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ETH_Init+0x84>)
 80006c8:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_ETH_Init+0x8c>)
 80006ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_ETH_Init+0x84>)
 80006ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ETH_Init+0x84>)
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <MX_ETH_Init+0x90>)
 80006d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_ETH_Init+0x84>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_ETH_Init+0x94>)
 80006de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_ETH_Init+0x84>)
 80006e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_ETH_Init+0x84>)
 80006ea:	f000 ffdb 	bl	80016a4 <HAL_ETH_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f8fa 	bl	80008ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f8:	2238      	movs	r2, #56	; 0x38
 80006fa:	2100      	movs	r1, #0
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_ETH_Init+0x98>)
 80006fe:	f003 ff71 	bl	80045e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_ETH_Init+0x98>)
 8000704:	2221      	movs	r2, #33	; 0x21
 8000706:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_ETH_Init+0x98>)
 800070a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800070e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_ETH_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001a8 	.word	0x200001a8
 8000720:	40028000 	.word	0x40028000
 8000724:	20000790 	.word	0x20000790
 8000728:	20000108 	.word	0x20000108
 800072c:	20000068 	.word	0x20000068
 8000730:	20000030 	.word	0x20000030

08000734 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800073e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2204      	movs	r2, #4
 8000744:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2202      	movs	r2, #2
 800074a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	2202      	movs	r2, #2
 8000756:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2201      	movs	r2, #1
 800075c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2201      	movs	r2, #1
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	f001 fda5 	bl	80022c6 <HAL_PCD_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8b3 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000258 	.word	0x20000258

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a4b      	ldr	r2, [pc, #300]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b49      	ldr	r3, [pc, #292]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b45      	ldr	r3, [pc, #276]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a44      	ldr	r2, [pc, #272]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a3d      	ldr	r2, [pc, #244]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a36      	ldr	r2, [pc, #216]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <MX_GPIO_Init+0x14c>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f244 0181 	movw	r1, #16513	; 0x4081
 8000854:	4822      	ldr	r0, [pc, #136]	; (80008e0 <MX_GPIO_Init+0x150>)
 8000856:	f001 fd1d 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4821      	ldr	r0, [pc, #132]	; (80008e4 <MX_GPIO_Init+0x154>)
 8000860:	f001 fd18 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	481b      	ldr	r0, [pc, #108]	; (80008e8 <MX_GPIO_Init+0x158>)
 800087c:	f001 fa3a 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000880:	f244 0381 	movw	r3, #16513	; 0x4081
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_GPIO_Init+0x150>)
 800089a:	f001 fa2b 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0x154>)
 80008b6:	f001 fa1d 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x154>)
 80008ce:	f001 fa11 	bl	8001cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40020800 	.word	0x40020800

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a55      	ldr	r2, [pc, #340]	; (8000abc <HAL_ETH_MspInit+0x174>)
 8000966:	4293      	cmp	r3, r2
 8000968:	f040 80a4 	bne.w	8000ab4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000984:	623b      	str	r3, [r7, #32]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a36      	ldr	r2, [pc, #216]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a30:	2332      	movs	r3, #50	; 0x32
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a40:	230b      	movs	r3, #11
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <HAL_ETH_MspInit+0x17c>)
 8000a4c:	f001 f952 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a50:	2386      	movs	r3, #134	; 0x86
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <HAL_ETH_MspInit+0x180>)
 8000a6c:	f001 f942 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a82:	230b      	movs	r3, #11
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <HAL_ETH_MspInit+0x184>)
 8000a8e:	f001 f931 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <HAL_ETH_MspInit+0x188>)
 8000ab0:	f001 f920 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3738      	adds	r7, #56	; 0x38
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40028000 	.word	0x40028000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40021800 	.word	0x40021800

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <HAL_UART_MspInit+0x94>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d134      	bne.n	8000b60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_UART_MspInit+0x98>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_UART_MspInit+0x9c>)
 8000b4c:	f001 f8d2 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2027      	movs	r0, #39	; 0x27
 8000b56:	f000 fcdc 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b5a:	2027      	movs	r0, #39	; 0x27
 8000b5c:	f000 fcf5 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40004800 	.word	0x40004800
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b94:	d13f      	bne.n	8000c16 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bb2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4815      	ldr	r0, [pc, #84]	; (8000c24 <HAL_PCD_MspInit+0xb0>)
 8000bd0:	f001 f890 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480e      	ldr	r0, [pc, #56]	; (8000c24 <HAL_PCD_MspInit+0xb0>)
 8000bea:	f001 f883 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_PCD_MspInit+0xac>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 fb2e 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffd7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f003 fc91 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fc3b 	bl	800054c <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ce4:	0800468c 	.word	0x0800468c
  ldr r2, =_sbss
 8000ce8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cec:	2000081c 	.word	0x2000081c

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>

08000cf2 <dummyGetTick>:
#include <API_delay.h>

/**
 * @brief Función vacía para inicializar @ref getCurrentTick.
 */
uint32_t dummyGetTick(){
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
	return 0;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <setGetCurrentTickFunction>:
/**
 * @brief Función para escribir @ref getCurrentTick.
 * @param function Puntero a función que obtiene el tiempo de sistema en milisegundos.
 * @retval None
 */
void setGetCurrentTickFunction(GetCurrentTick_t function){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(function!=NULL) getCurrentTick = function;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <setGetCurrentTickFunction+0x14>
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <setGetCurrentTickFunction+0x20>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20000008 	.word	0x20000008

08000d28 <delayInit>:

void delayInit( delay_t * delay, tick_t duration, bool_t singleShot ){
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
	if(delay == NULL) return;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00f      	beq.n	8000d5c <delayInit+0x34>
	delay->startTime= 0;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
	delay->running = false;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	731a      	strb	r2, [r3, #12]
	delay->singleShot = singleShot;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	739a      	strb	r2, [r3, #14]
	delay->duration = duration;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	605a      	str	r2, [r3, #4]
	delay->enabled = true;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2201      	movs	r2, #1
 8000d58:	735a      	strb	r2, [r3, #13]
	return;
 8000d5a:	e000      	b.n	8000d5e <delayInit+0x36>
	if(delay == NULL) return;
 8000d5c:	bf00      	nop
}
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	if(delay == NULL) return false;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <delayRead+0x12>
 8000d76:	2300      	movs	r3, #0
 8000d78:	e03f      	b.n	8000dfa <delayRead+0x92>
	if(delay->enabled == false) return false;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b5b      	ldrb	r3, [r3, #13]
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <delayRead+0x24>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e036      	b.n	8000dfa <delayRead+0x92>
	if(delay->running == false){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7b1b      	ldrb	r3, [r3, #12]
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00b      	beq.n	8000db2 <delayRead+0x4a>
		delay->startTime = getCurrentTick() - delay->elapsed;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <delayRead+0x9c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4798      	blx	r3
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	731a      	strb	r2, [r3, #12]
	}
	//ver en el .list, al no ser volatil, si es lo mismo repetir delay->elapsed en la comparación que declarar la variable intermedia,
	//o si realmente estoy evitando el doble fetch.
	tick_t elapsed = getCurrentTick() - delay->startTime;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <delayRead+0x9c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4798      	blx	r3
 8000db8:	4602      	mov	r2, r0
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	60fb      	str	r3, [r7, #12]
	delay->elapsed = elapsed;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	609a      	str	r2, [r3, #8]
	if(elapsed >= delay->duration){
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d312      	bcc.n	8000df8 <delayRead+0x90>
		if(delay->singleShot) delay->running=false;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7b9b      	ldrb	r3, [r3, #14]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <delayRead+0x7a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	731a      	strb	r2, [r3, #12]
 8000de0:	e005      	b.n	8000dee <delayRead+0x86>
		else delay->startTime = getCurrentTick();
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <delayRead+0x9c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4798      	blx	r3
 8000de8:	4602      	mov	r2, r0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
		delay->elapsed = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
		return true;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <delayRead+0x92>
	}
	else return false;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <delayRestart>:
	if(restart){
		delayRestart(delay);
	}
}

void delayRestart(delay_t * delay){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	delay->elapsed = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
	delay->running = false;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	731a      	strb	r2, [r3, #12]
	if(!delay->singleShot) delayRead(delay);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7b9b      	ldrb	r3, [r3, #14]
 8000e20:	f083 0301 	eor.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <delayRestart+0x28>
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff9c 	bl	8000d68 <delayRead>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <readButton>:
 *      Author: Javier Cambiasso
 */

#include <API_inputs.h>

bool readButton(inputDebounce_t* input){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	GPIO_PinState pin =  HAL_GPIO_ReadPin(input->port,input->pin);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	891b      	ldrh	r3, [r3, #8]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f001 fa0a 	bl	8002264 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
	//El XOR (^) es para admitir que la entrada tenga lógica negativa, si tenés por ejemplo un pull-up/open drain.
	if(pin == GPIO_PIN_RESET) return false^input->negativeLogic;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d107      	bne.n	8000e6a <readButton+0x32>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7f5b      	ldrb	r3, [r3, #29]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	e009      	b.n	8000e7e <readButton+0x46>
	else return true^input->negativeLogic;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7f5b      	ldrb	r3, [r3, #29]
 8000e6e:	f083 0301 	eor.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <dummyInputCallback>:

void dummyInputCallback(){
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
	return;
 8000e8a:	bf00      	nop
}
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <debounceFSM_init>:

void debounceFSM_init(inputDebounce_t* input, uint32_t debounceTime, bool negativeLogic){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if(input == NULL) return;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d01b      	beq.n	8000ee0 <debounceFSM_init+0x4c>
	//eventualmente inicializaria la entrada.
	input->state = BUTTON_LOW;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
	input->negativeLogic = negativeLogic;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	775a      	strb	r2, [r3, #29]
	delayInit( &(input->delay), debounceTime, true );
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	330c      	adds	r3, #12
 8000eb8:	2201      	movs	r2, #1
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff33 	bl	8000d28 <delayInit>
	if(input->onButtonReleased == NULL) input->onButtonReleased = dummyInputCallback;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <debounceFSM_init+0x3c>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <debounceFSM_init+0x54>)
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
	if(input->onButtonPressed == NULL) input->onButtonPressed = dummyInputCallback;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <debounceFSM_init+0x4e>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <debounceFSM_init+0x54>)
 8000edc:	621a      	str	r2, [r3, #32]
 8000ede:	e000      	b.n	8000ee2 <debounceFSM_init+0x4e>
	if(input == NULL) return;
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08000e87 	.word	0x08000e87

08000eec <debounceFSM_update>:

bool debounceFSM_update(inputDebounce_t* input){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(input == NULL) return false;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <debounceFSM_update+0x12>
 8000efa:	2300      	movs	r3, #0
 8000efc:	e08e      	b.n	800101c <debounceFSM_update+0x130>
	input->currentLevel = readButton(input);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff9a 	bl	8000e38 <readButton>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	771a      	strb	r2, [r3, #28]
	bool result;
	switch(input->state){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d873      	bhi.n	8000ffc <debounceFSM_update+0x110>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <debounceFSM_update+0x30>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f5b 	.word	0x08000f5b
 8000f24:	08000f47 	.word	0x08000f47
 8000f28:	08000faf 	.word	0x08000faf
		case BUTTON_HIGH:{
			if(!input->currentLevel) input->state = BUTTON_FALLING;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f1b      	ldrb	r3, [r3, #28]
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <debounceFSM_update+0x54>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
			result = true;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000f44:	e069      	b.n	800101a <debounceFSM_update+0x12e>
		case BUTTON_LOW:{
			if(input->currentLevel) input->state = BUTTON_RISING;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7f1b      	ldrb	r3, [r3, #28]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <debounceFSM_update+0x68>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	701a      	strb	r2, [r3, #0]
			result = false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000f58:	e05f      	b.n	800101a <debounceFSM_update+0x12e>
		case BUTTON_FALLING:{
			if(delayRead(&(input->delay))){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff02 	bl	8000d68 <delayRead>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01e      	beq.n	8000fa8 <debounceFSM_update+0xbc>
				if(!input->currentLevel){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f1b      	ldrb	r3, [r3, #28]
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00c      	beq.n	8000f92 <debounceFSM_update+0xa6>
					if(input->onButtonReleased!= NULL) input->onButtonReleased();
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <debounceFSM_update+0x9a>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	4798      	blx	r3
					input->state = BUTTON_LOW;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
					result = false;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
					result = true;
				}
			}
			else result = true;
		}
		break;
 8000f90:	e043      	b.n	800101a <debounceFSM_update+0x12e>
					delayRestart(&(input->delay));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	330c      	adds	r3, #12
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff36 	bl	8000e08 <delayRestart>
					input->state = BUTTON_HIGH;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
					result = true;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
		break;
 8000fa6:	e038      	b.n	800101a <debounceFSM_update+0x12e>
			else result = true;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
		break;
 8000fac:	e035      	b.n	800101a <debounceFSM_update+0x12e>
		case BUTTON_RISING:{
			if(delayRead(&(input->delay))){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fed8 	bl	8000d68 <delayRead>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d01b      	beq.n	8000ff6 <debounceFSM_update+0x10a>
				if(input->currentLevel){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f1b      	ldrb	r3, [r3, #28]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <debounceFSM_update+0xf4>
					if(input->onButtonPressed!= NULL) input->onButtonPressed();
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <debounceFSM_update+0xe8>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4798      	blx	r3
					input->state = BUTTON_HIGH;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
					result = true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
					result = false;
				}
			}
			else result = false;
		}
		break;
 8000fde:	e01c      	b.n	800101a <debounceFSM_update+0x12e>
					delayRestart(&(input->delay));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff0f 	bl	8000e08 <delayRestart>
					input->state = BUTTON_LOW;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2202      	movs	r2, #2
 8000fee:	701a      	strb	r2, [r3, #0]
					result = false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
		break;
 8000ff4:	e011      	b.n	800101a <debounceFSM_update+0x12e>
			else result = false;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
		break;
 8000ffa:	e00e      	b.n	800101a <debounceFSM_update+0x12e>
		default:{
			if(input->currentLevel) input->state = BUTTON_HIGH;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7f1b      	ldrb	r3, [r3, #28]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <debounceFSM_update+0x120>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <debounceFSM_update+0x126>
			else input->state = BUTTON_LOW;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
			result = input->currentLevel;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7f1b      	ldrb	r3, [r3, #28]
 8001016:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8001018:	bf00      	nop
	}
	return result;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <uartMspInit>:

void uart_registerErrorCallback(pUART_CallbackTypeDef callback){
	if(callback != NULL) errorCallback = callback;
}

static void uartMspInit(UART_HandleTypeDef* huart){
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
	if(huart->Instance==USART3){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <uartMspInit+0x94>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d123      	bne.n	800108e <uartMspInit+0x6a>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <uartMspInit+0x98>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <uartMspInit+0x98>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <uartMspInit+0x98>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <uartMspInit+0x98>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <uartMspInit+0x98>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <uartMspInit+0x98>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2027      	movs	r0, #39	; 0x27
 8001084:	f000 fa45 	bl	8001512 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001088:	2027      	movs	r0, #39	; 0x27
 800108a:	f000 fa5e 	bl	800154a <HAL_NVIC_EnableIRQ>
	}
	GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a0:	2307      	movs	r3, #7
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(UART_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <uartMspInit+0x9c>)
 80010ac:	f000 fe22 	bl	8001cf4 <HAL_GPIO_Init>
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004800 	.word	0x40004800
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <uartMspDeInit>:

static void uartMspDeInit(UART_HandleTypeDef* huart){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <uartMspDeInit+0x30>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d105      	bne.n	80010e2 <uartMspDeInit+0x1e>
		__HAL_RCC_USART3_CLK_DISABLE();
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <uartMspDeInit+0x34>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <uartMspDeInit+0x34>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
	}
	HAL_GPIO_DeInit(UART_GPIO_Port, UART_RX_Pin|UART_TX_Pin);
 80010e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <uartMspDeInit+0x38>)
 80010e8:	f000 ffb0 	bl	800204c <HAL_GPIO_DeInit>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40004800 	.word	0x40004800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <uartInit>:


bool_t uartInit(uint32_t baudRate, uint32_t wordLength, uint32_t stopBits, uint32_t parity){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	bool result = false;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
	huart.Instance = UART_INSTANCE;
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <uartInit+0xb8>)
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <uartInit+0xbc>)
 8001116:	601a      	str	r2, [r3, #0]
	if(baudRate != 0 ) huart.Init.BaudRate = baudRate;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <uartInit+0x26>
 800111e:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <uartInit+0xb8>)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6053      	str	r3, [r2, #4]
 8001124:	e003      	b.n	800112e <uartInit+0x2e>
	else huart.Init.BaudRate = 115200;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <uartInit+0xb8>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
	if(wordLength!= 0 ) huart.Init.WordLength = wordLength;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <uartInit+0x3c>
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <uartInit+0xb8>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	6093      	str	r3, [r2, #8]
 800113a:	e002      	b.n	8001142 <uartInit+0x42>
	else huart.Init.WordLength = UART_WORDLENGTH_8B;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <uartInit+0xb8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <uartInit+0xb8>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <uartInit+0xb8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <uartInit+0xb8>)
 8001150:	220c      	movs	r2, #12
 8001152:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <uartInit+0xb8>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <uartInit+0xb8>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
	HAL_UART_RegisterCallback(&huart, HAL_UART_MSPINIT_CB_ID, uartMspInit);
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <uartInit+0xc0>)
 8001162:	210b      	movs	r1, #11
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <uartInit+0xb8>)
 8001166:	f001 febd 	bl	8002ee4 <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(&huart, HAL_UART_MSPDEINIT_CB_ID, uartMspDeInit);
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <uartInit+0xc4>)
 800116c:	210c      	movs	r1, #12
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <uartInit+0xb8>)
 8001170:	f001 feb8 	bl	8002ee4 <HAL_UART_RegisterCallback>
	if (HAL_UART_Init(&huart) == HAL_OK)
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <uartInit+0xb8>)
 8001176:	f001 fe5b 	bl	8002e30 <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d115      	bne.n	80011ac <uartInit+0xac>
	{
		HAL_UART_RegisterCallback(&huart, HAL_UART_TX_COMPLETE_CB_ID, transmitCompletedCallback);
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <uartInit+0xc8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	2101      	movs	r1, #1
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <uartInit+0xb8>)
 800118a:	f001 feab 	bl	8002ee4 <HAL_UART_RegisterCallback>
		HAL_UART_RegisterCallback(&huart, HAL_UART_ERROR_CB_ID, errorCallback);
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <uartInit+0xcc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	2104      	movs	r1, #4
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <uartInit+0xb8>)
 8001198:	f001 fea4 	bl	8002ee4 <HAL_UART_RegisterCallback>
		HAL_UART_RegisterRxEventCallback(&huart, receiveCallback);
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <uartInit+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <uartInit+0xb8>)
 80011a4:	f001 ff46 	bl	8003034 <HAL_UART_RegisterRxEventCallback>
		result = true;
 80011a8:	2301      	movs	r3, #1
 80011aa:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200007a4 	.word	0x200007a4
 80011bc:	40004800 	.word	0x40004800
 80011c0:	08001025 	.word	0x08001025
 80011c4:	080010c5 	.word	0x080010c5
 80011c8:	20000798 	.word	0x20000798
 80011cc:	2000079c 	.word	0x2000079c
 80011d0:	200007a0 	.word	0x200007a0

080011d4 <uartSendString>:


void uartSendString(uint8_t * pstring){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if(pstring == NULL) return;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <uartSendString+0x26>
	size_t size = strlen((char*)pstring);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f802 	bl	80001ec <strlen>
 80011e8:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit_IT(&huart, (const uint8_t*)pstring , (uint16_t)size);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <uartSendString+0x30>)
 80011f4:	f001 ff58 	bl	80030a8 <HAL_UART_Transmit_IT>
 80011f8:	e000      	b.n	80011fc <uartSendString+0x28>
	if(pstring == NULL) return;
 80011fa:	bf00      	nop
}
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200007a4 	.word	0x200007a4

08001208 <uartGetState>:
}

void uartReceiveStringSize(uint8_t * pstring, uint16_t size){
	HAL_UART_Receive_IT(&huart,pstring, size);
}
HAL_UART_StateTypeDef uartGetState(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <uartGetState+0x10>)
 800120e:	f002 fa7f 	bl	8003710 <HAL_UART_GetState>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200007a4 	.word	0x200007a4

0800121c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART3_IRQHandler+0x10>)
 8001222:	f001 ff87 	bl	8003134 <HAL_UART_IRQHandler>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200007a4 	.word	0x200007a4

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f94f 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fb48 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f967 	bl	8001566 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f92f 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000004 	.word	0x20000004
 80012cc:	20000010 	.word	0x20000010
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000010 	.word	0x20000010
 80012f8:	20000818 	.word	0x20000818

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000818 	.word	0x20000818

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000010 	.word	0x20000010

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff feb6 	bl	80012fc <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e052      	b.n	8001656 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0216 	bic.w	r2, r2, #22
 80015be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <HAL_DMA_Abort+0x62>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0208 	bic.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	e013      	b.n	800162a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001602:	f7ff fe7b 	bl	80012fc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b05      	cmp	r3, #5
 800160e:	d90c      	bls.n	800162a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2220      	movs	r2, #32
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e015      	b.n	8001656 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e4      	bne.n	8001602 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d004      	beq.n	800167c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e00c      	b.n	8001696 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06c      	b.n	8001790 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d106      	bne.n	80016ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2223      	movs	r2, #35	; 0x23
 80016c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff f93d 	bl	8000948 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_ETH_Init+0xf4>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_ETH_Init+0xf4>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_ETH_Init+0xf4>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_ETH_Init+0xf8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <HAL_ETH_Init+0xf8>)
 80016f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_ETH_Init+0xf8>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4927      	ldr	r1, [pc, #156]	; (800179c <HAL_ETH_Init+0xf8>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_ETH_Init+0xf8>)
 8001706:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001720:	f7ff fdec 	bl	80012fc <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001726:	e011      	b.n	800174c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001728:	f7ff fde8 	bl	80012fc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001736:	d909      	bls.n	800174c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2204      	movs	r2, #4
 800173c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	22e0      	movs	r2, #224	; 0xe0
 8001744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e021      	b.n	8001790 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1e4      	bne.n	8001728 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f958 	bl	8001a14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f9ff 	bl	8001b68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa55 	bl	8001c1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	461a      	mov	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f9bd 	bl	8001af8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2210      	movs	r2, #16
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800

080017a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <ETH_SetMACConfig+0x15c>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7c1b      	ldrb	r3, [r3, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <ETH_SetMACConfig+0x28>
 80017c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017c6:	e000      	b.n	80017ca <ETH_SetMACConfig+0x2a>
 80017c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	7c5b      	ldrb	r3, [r3, #17]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <ETH_SetMACConfig+0x38>
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	e000      	b.n	80017da <ETH_SetMACConfig+0x3a>
 80017d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	7fdb      	ldrb	r3, [r3, #31]
 80017e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	7f92      	ldrb	r2, [r2, #30]
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d102      	bne.n	80017fe <ETH_SetMACConfig+0x5e>
 80017f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fc:	e000      	b.n	8001800 <ETH_SetMACConfig+0x60>
 80017fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001800:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7f1b      	ldrb	r3, [r3, #28]
 8001806:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001808:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800180e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001816:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800181e:	2a00      	cmp	r2, #0
 8001820:	d102      	bne.n	8001828 <ETH_SetMACConfig+0x88>
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	e000      	b.n	800182a <ETH_SetMACConfig+0x8a>
 8001828:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800182a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7bdb      	ldrb	r3, [r3, #15]
 8001830:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001832:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001840:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001842:	4313      	orrs	r3, r2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fd5a 	bl	8001314 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001886:	2a00      	cmp	r2, #0
 8001888:	d101      	bne.n	800188e <ETH_SetMACConfig+0xee>
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	e000      	b.n	8001890 <ETH_SetMACConfig+0xf0>
 800188e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001890:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001896:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800189e:	2a01      	cmp	r2, #1
 80018a0:	d101      	bne.n	80018a6 <ETH_SetMACConfig+0x106>
 80018a2:	2208      	movs	r2, #8
 80018a4:	e000      	b.n	80018a8 <ETH_SetMACConfig+0x108>
 80018a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018b0:	2a01      	cmp	r2, #1
 80018b2:	d101      	bne.n	80018b8 <ETH_SetMACConfig+0x118>
 80018b4:	2204      	movs	r2, #4
 80018b6:	e000      	b.n	80018ba <ETH_SetMACConfig+0x11a>
 80018b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80018c2:	2a01      	cmp	r2, #1
 80018c4:	d101      	bne.n	80018ca <ETH_SetMACConfig+0x12a>
 80018c6:	2202      	movs	r2, #2
 80018c8:	e000      	b.n	80018cc <ETH_SetMACConfig+0x12c>
 80018ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7ff fd15 	bl	8001314 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	ff20810f 	.word	0xff20810f

08001900 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <ETH_SetDMAConfig+0x110>)
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <ETH_SetDMAConfig+0x2c>
 8001926:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800192a:	e000      	b.n	800192e <ETH_SetDMAConfig+0x2e>
 800192c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7b5b      	ldrb	r3, [r3, #13]
 8001932:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001934:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	7f52      	ldrb	r2, [r2, #29]
 800193a:	2a00      	cmp	r2, #0
 800193c:	d102      	bne.n	8001944 <ETH_SetDMAConfig+0x44>
 800193e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001942:	e000      	b.n	8001946 <ETH_SetDMAConfig+0x46>
 8001944:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001946:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	7b9b      	ldrb	r3, [r3, #14]
 800194c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800194e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001954:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7f1b      	ldrb	r3, [r3, #28]
 800195a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800195c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7f9b      	ldrb	r3, [r3, #30]
 8001962:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001964:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800196a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001972:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001974:	4313      	orrs	r3, r2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001984:	461a      	mov	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff fcbc 	bl	8001314 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	461a      	mov	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff fc8d 	bl	8001314 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	f8de3f23 	.word	0xf8de3f23

08001a14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0a6      	sub	sp, #152	; 0x98
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a50:	2300      	movs	r3, #0
 8001a52:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fe86 	bl	80017a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ace:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff08 	bl	8001900 <ETH_SetDMAConfig>
}
 8001af0:	bf00      	nop
 8001af2:	3798      	adds	r7, #152	; 0x98
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3305      	adds	r3, #5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	3204      	adds	r2, #4
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <ETH_MACAddressConfig+0x68>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	061a      	lsls	r2, r3, #24
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3301      	adds	r3, #1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	7812      	ldrb	r2, [r2, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <ETH_MACAddressConfig+0x6c>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40028040 	.word	0x40028040
 8001b64:	40028044 	.word	0x40028044

08001b68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e03e      	b.n	8001bf4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	3206      	adds	r2, #6
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d80c      	bhi.n	8001bd8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	e004      	b.n	8001be2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d9bd      	bls.n	8001b76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	611a      	str	r2, [r3, #16]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e046      	b.n	8001cb6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6919      	ldr	r1, [r3, #16]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c64:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	3212      	adds	r2, #18
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d80c      	bhi.n	8001ca6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6919      	ldr	r1, [r3, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	e004      	b.n	8001cb0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d9b5      	bls.n	8001c28 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e177      	b.n	8002000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8166 	bne.w	8001ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d130      	bne.n	8001da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d123      	bne.n	8001e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80c0 	beq.w	8001ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a61      	ldr	r2, [pc, #388]	; (800201c <HAL_GPIO_Init+0x328>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_GPIO_Init+0x32c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d037      	beq.n	8001f32 <HAL_GPIO_Init+0x23e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a57      	ldr	r2, [pc, #348]	; (8002024 <HAL_GPIO_Init+0x330>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_GPIO_Init+0x23a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a56      	ldr	r2, [pc, #344]	; (8002028 <HAL_GPIO_Init+0x334>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <HAL_GPIO_Init+0x236>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_GPIO_Init+0x338>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x232>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_GPIO_Init+0x33c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x22e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a53      	ldr	r2, [pc, #332]	; (8002034 <HAL_GPIO_Init+0x340>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x22a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x344>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x226>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_GPIO_Init+0x348>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x222>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_GPIO_Init+0x34c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x21e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x21a>
 8001f0a:	2309      	movs	r3, #9
 8001f0c:	e012      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f0e:	230a      	movs	r3, #10
 8001f10:	e010      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f12:	2308      	movs	r3, #8
 8001f14:	e00e      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e00c      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e00a      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f22:	2304      	movs	r3, #4
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x240>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x328>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_GPIO_Init+0x354>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f ae84 	bls.w	8001d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40021400 	.word	0x40021400
 8002038:	40021800 	.word	0x40021800
 800203c:	40021c00 	.word	0x40021c00
 8002040:	40022000 	.word	0x40022000
 8002044:	40022400 	.word	0x40022400
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e0d9      	b.n	800221c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002068:	2201      	movs	r2, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	f040 80c9 	bne.w	8002216 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002084:	4a6b      	ldr	r2, [pc, #428]	; (8002234 <HAL_GPIO_DeInit+0x1e8>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a63      	ldr	r2, [pc, #396]	; (8002238 <HAL_GPIO_DeInit+0x1ec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d037      	beq.n	800211e <HAL_GPIO_DeInit+0xd2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a62      	ldr	r2, [pc, #392]	; (800223c <HAL_GPIO_DeInit+0x1f0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_GPIO_DeInit+0xce>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_GPIO_DeInit+0x1f4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_DeInit+0xca>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_GPIO_DeInit+0x1f8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_DeInit+0xc6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a5f      	ldr	r2, [pc, #380]	; (8002248 <HAL_GPIO_DeInit+0x1fc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_DeInit+0xc2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a5e      	ldr	r2, [pc, #376]	; (800224c <HAL_GPIO_DeInit+0x200>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_DeInit+0xbe>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a5d      	ldr	r2, [pc, #372]	; (8002250 <HAL_GPIO_DeInit+0x204>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_DeInit+0xba>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_GPIO_DeInit+0x208>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_DeInit+0xb6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_GPIO_DeInit+0x20c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_DeInit+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_GPIO_DeInit+0x210>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_DeInit+0xae>
 80020f6:	2309      	movs	r3, #9
 80020f8:	e012      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 80020fa:	230a      	movs	r3, #10
 80020fc:	e010      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 80020fe:	2308      	movs	r3, #8
 8002100:	e00e      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 8002102:	2307      	movs	r3, #7
 8002104:	e00c      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 8002106:	2306      	movs	r3, #6
 8002108:	e00a      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 800210a:	2305      	movs	r3, #5
 800210c:	e008      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 800210e:	2304      	movs	r3, #4
 8002110:	e006      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 8002112:	2303      	movs	r3, #3
 8002114:	e004      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 8002116:	2302      	movs	r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_GPIO_DeInit+0xd4>
 800211e:	2300      	movs	r3, #0
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	f002 0203 	and.w	r2, r2, #3
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	4093      	lsls	r3, r2
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d132      	bne.n	8002196 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	4949      	ldr	r1, [pc, #292]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800213e:	4b48      	ldr	r3, [pc, #288]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43db      	mvns	r3, r3
 8002146:	4946      	ldr	r1, [pc, #280]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 8002148:	4013      	ands	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	4942      	ldr	r1, [pc, #264]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 8002156:	4013      	ands	r3, r2
 8002158:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	493f      	ldr	r1, [pc, #252]	; (8002260 <HAL_GPIO_DeInit+0x214>)
 8002164:	4013      	ands	r3, r2
 8002166:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002178:	4a2e      	ldr	r2, [pc, #184]	; (8002234 <HAL_GPIO_DeInit+0x1e8>)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	43da      	mvns	r2, r3
 8002188:	482a      	ldr	r0, [pc, #168]	; (8002234 <HAL_GPIO_DeInit+0x1e8>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	400a      	ands	r2, r1
 8002190:	3302      	adds	r3, #2
 8002192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2103      	movs	r1, #3
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	08d2      	lsrs	r2, r2, #3
 80021cc:	4019      	ands	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2103      	movs	r1, #3
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2103      	movs	r1, #3
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f af22 	bls.w	8002068 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40021400 	.word	0x40021400
 8002250:	40021800 	.word	0x40021800
 8002254:	40021c00 	.word	0x40021c00
 8002258:	40022000 	.word	0x40022000
 800225c:	40022400 	.word	0x40022400
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c8:	b08f      	sub	sp, #60	; 0x3c
 80022ca:	af0a      	add	r7, sp, #40	; 0x28
 80022cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e10f      	b.n	80024f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fc3e 	bl	8000b74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fec3 	bl	80040a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	687e      	ldr	r6, [r7, #4]
 8002324:	466d      	mov	r5, sp
 8002326:	f106 0410 	add.w	r4, r6, #16
 800232a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002336:	e885 0003 	stmia.w	r5, {r0, r1}
 800233a:	1d33      	adds	r3, r6, #4
 800233c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	f001 fe4e 	bl	8003fe0 <USB_CoreInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d0      	b.n	80024f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f001 feb1 	bl	80040c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e04a      	b.n	80023fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	333d      	adds	r3, #61	; 0x3d
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	333c      	adds	r3, #60	; 0x3c
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	b298      	uxth	r0, r3
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3344      	adds	r3, #68	; 0x44
 80023a4:	4602      	mov	r2, r0
 80023a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3340      	adds	r3, #64	; 0x40
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3348      	adds	r3, #72	; 0x48
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334c      	adds	r3, #76	; 0x4c
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3354      	adds	r3, #84	; 0x54
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d3af      	bcc.n	8002368 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e044      	b.n	8002498 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3b5      	bcc.n	800240e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	687e      	ldr	r6, [r7, #4]
 80024aa:	466d      	mov	r5, sp
 80024ac:	f106 0410 	add.w	r4, r6, #16
 80024b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80024c0:	1d33      	adds	r3, r6, #4
 80024c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c4:	6838      	ldr	r0, [r7, #0]
 80024c6:	f001 fe49 	bl	800415c <USB_DevInit>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00d      	b.n	80024f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 f814 	bl	800451e <USB_DevDisconnect>

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e267      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d075      	beq.n	800260a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d112      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05b      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d157      	bne.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e242      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x74>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6f      	ldr	r2, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a68      	ldr	r2, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a65      	ldr	r2, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fea0 	bl	80012fc <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fe9c 	bl	80012fc <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e207      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe8c 	bl	80012fc <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fe88 	bl	80012fc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1f3      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c7      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fe41 	bl	80012fc <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fe3d 	bl	80012fc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a8      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4925      	ldr	r1, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fe20 	bl	80012fc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fe1c 	bl	80012fc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e187      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d036      	beq.n	8002758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe00 	bl	80012fc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fdfc 	bl	80012fc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e167      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x200>
 800271e:	e01b      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7fe fde9 	bl	80012fc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	e00e      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272e:	f7fe fde5 	bl	80012fc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d907      	bls.n	800274c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e150      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
 8002748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b88      	ldr	r3, [pc, #544]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ea      	bne.n	800272e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8097 	beq.w	8002894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b7d      	ldr	r3, [pc, #500]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a7c      	ldr	r2, [pc, #496]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fda5 	bl	80012fc <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe fda1 	bl	80012fc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e10c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x2ea>
 80027dc:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x30c>
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe fd66 	bl	80012fc <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe fd62 	bl	80012fc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0cb      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ee      	beq.n	8002834 <HAL_RCC_OscConfig+0x334>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe fd50 	bl	80012fc <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe fd4c 	bl	80012fc <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0b5      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ee      	bne.n	8002860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a1 	beq.w	80029e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d05c      	beq.n	8002964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d141      	bne.n	8002936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fd20 	bl	80012fc <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fd1c 	bl	80012fc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e087      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	491b      	ldr	r1, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fcf5 	bl	80012fc <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fcf1 	bl	80012fc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e05c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x416>
 8002934:	e054      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fcde 	bl	80012fc <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fcda 	bl	80012fc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e045      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x444>
 8002962:	e03d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e038      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000
 8002978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d028      	beq.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d121      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11a      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d90c      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e067      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fc0c 	bl	80012fc <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fc08 	bl	80012fc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20c      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fb6c 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08004664 	.word	0x08004664
 8002bb4:	20000004 	.word	0x20000004
 8002bb8:	2000000c 	.word	0x2000000c

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc0:	b094      	sub	sp, #80	; 0x50
 8002bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc8:	2300      	movs	r3, #0
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	2300      	movs	r3, #0
 8002bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x40>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	f200 80e1 	bhi.w	8002da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bee:	e0db      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bf4:	e0db      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfa:	e0d8      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d063      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	2200      	movs	r2, #0
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	0159      	lsls	r1, r3, #5
 8002c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c40:	0150      	lsls	r0, r2, #5
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4621      	mov	r1, r4
 8002c48:	1a51      	subs	r1, r2, r1
 8002c4a:	6139      	str	r1, [r7, #16]
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c60:	4659      	mov	r1, fp
 8002c62:	018b      	lsls	r3, r1, #6
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	018a      	lsls	r2, r1, #6
 8002c6e:	4651      	mov	r1, sl
 8002c70:	ebb2 0801 	subs.w	r8, r2, r1
 8002c74:	4659      	mov	r1, fp
 8002c76:	eb63 0901 	sbc.w	r9, r3, r1
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8e:	4690      	mov	r8, r2
 8002c90:	4699      	mov	r9, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	eb18 0303 	adds.w	r3, r8, r3
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	024b      	lsls	r3, r1, #9
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb8:	4621      	mov	r1, r4
 8002cba:	024a      	lsls	r2, r1, #9
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ccc:	f7fd fa96 	bl	80001fc <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	e058      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d06:	0150      	lsls	r0, r2, #5
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d12:	4649      	mov	r1, r9
 8002d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d30:	eb63 050b 	sbc.w	r5, r3, fp
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	00eb      	lsls	r3, r5, #3
 8002d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d42:	00e2      	lsls	r2, r4, #3
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	4643      	mov	r3, r8
 8002d4a:	18e3      	adds	r3, r4, r3
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	464b      	mov	r3, r9
 8002d50:	eb45 0303 	adc.w	r3, r5, r3
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d62:	4629      	mov	r1, r5
 8002d64:	028b      	lsls	r3, r1, #10
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	028a      	lsls	r2, r1, #10
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d76:	2200      	movs	r2, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	61fa      	str	r2, [r7, #28]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	f7fd fa3c 	bl	80001fc <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3750      	adds	r7, #80	; 0x50
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	007a1200 	.word	0x007a1200

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a9b      	lsrs	r3, r3, #10
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08004674 	.word	0x08004674

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffdc 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0b5b      	lsrs	r3, r3, #13
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08004674 	.word	0x08004674

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e04a      	b.n	8002ed8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d111      	bne.n	8002e72 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc78 	bl	800374c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_UART_Init+0xb0>)
 8002e68:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2224      	movs	r2, #36	; 0x24
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fe34 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	08000ad5 	.word	0x08000ad5

08002ee4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	460b      	mov	r3, r1
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e08c      	b.n	8003026 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_RegisterCallback+0x36>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e085      	b.n	8003026 <HAL_UART_RegisterCallback+0x142>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d151      	bne.n	8002fd2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8002f2e:	7afb      	ldrb	r3, [r7, #11]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d845      	bhi.n	8002fc0 <HAL_UART_RegisterCallback+0xdc>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_UART_RegisterCallback+0x58>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f81 	.word	0x08002f81
 8002f48:	08002f89 	.word	0x08002f89
 8002f4c:	08002f91 	.word	0x08002f91
 8002f50:	08002f99 	.word	0x08002f99
 8002f54:	08002fa1 	.word	0x08002fa1
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08002fc1 	.word	0x08002fc1
 8002f64:	08002fc1 	.word	0x08002fc1
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fb9 	.word	0x08002fb9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002f76:	e051      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002f7e:	e04d      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002f86:	e049      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002f8e:	e045      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002f96:	e041      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002f9e:	e03d      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002fa6:	e039      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002fae:	e035      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002fb6:	e031      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002fbe:	e02d      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
        break;
 8002fd0:	e024      	b.n	800301c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d002      	beq.n	8002fea <HAL_UART_RegisterCallback+0x106>
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d004      	beq.n	8002ff2 <HAL_UART_RegisterCallback+0x10e>
 8002fe8:	e007      	b.n	8002ffa <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002ff0:	e014      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002ff8:	e010      	b.n	800301c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
        break;
 800300a:	e007      	b.n	800301c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_UART_RegisterRxEventCallback+0x24>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e021      	b.n	800309c <HAL_UART_RegisterRxEventCallback+0x68>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_RegisterRxEventCallback+0x32>
 8003062:	2302      	movs	r3, #2
 8003064:	e01a      	b.n	800309c <HAL_UART_RegisterRxEventCallback+0x68>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d103      	bne.n	8003082 <HAL_UART_RegisterRxEventCallback+0x4e>
  {
    huart->RxEventCallback = pCallback;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	669a      	str	r2, [r3, #104]	; 0x68
 8003080:	e007      	b.n	8003092 <HAL_UART_RegisterRxEventCallback+0x5e>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40

    status =  HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d130      	bne.n	8003124 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_Transmit_IT+0x26>
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e029      	b.n	8003126 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Transmit_IT+0x38>
 80030dc:	2302      	movs	r3, #2
 80030de:	e022      	b.n	8003126 <HAL_UART_Transmit_IT+0x7e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2221      	movs	r2, #33	; 0x21
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800311e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0ba      	sub	sp, #232	; 0xe8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800317a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_UART_IRQHandler+0x66>
 8003186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fbf3 	bl	800397e <UART_Receive_IT>
      return;
 8003198:	e25b      	b.n	8003652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800319a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80e1 	beq.w	8003366 <HAL_UART_IRQHandler+0x232>
 80031a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80d4 	beq.w	8003366 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_UART_IRQHandler+0xae>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_UART_IRQHandler+0xd2>
 80031ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0202 	orr.w	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_UART_IRQHandler+0xf6>
 8003212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d011      	beq.n	800325a <HAL_UART_IRQHandler+0x126>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f043 0208 	orr.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 81f2 	beq.w	8003648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_UART_IRQHandler+0x14e>
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fb7e 	bl	800397e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_UART_IRQHandler+0x17a>
 80032a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d051      	beq.n	8003352 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fa84 	bl	80037bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d142      	bne.n	8003348 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1d9      	bne.n	80032c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	2b00      	cmp	r3, #0
 8003314:	d013      	beq.n	800333e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	4a7f      	ldr	r2, [pc, #508]	; (8003518 <HAL_UART_IRQHandler+0x3e4>)
 800331c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f99b 	bl	800165e <HAL_DMA_Abort_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d019      	beq.n	8003362 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003338:	4610      	mov	r0, r2
 800333a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e011      	b.n	8003362 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003346:	e00c      	b.n	8003362 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	e007      	b.n	8003362 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003360:	e172      	b.n	8003648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003362:	bf00      	nop
    return;
 8003364:	e170      	b.n	8003648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	2b01      	cmp	r3, #1
 800336c:	f040 814c 	bne.w	8003608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8145 	beq.w	8003608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800337e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 813e 	beq.w	8003608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	f040 80b5 	bne.w	800351c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8142 	beq.w	800364c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f080 813b 	bcs.w	800364c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e8:	f000 8088 	beq.w	80034fc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003418:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800341c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003424:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1d9      	bne.n	80033ec <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800345c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003460:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003464:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800346e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e1      	bne.n	8003438 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003498:	66fa      	str	r2, [r7, #108]	; 0x6c
 800349a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800349e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e3      	bne.n	8003474 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034cc:	f023 0310 	bic.w	r3, r3, #16
 80034d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034de:	65ba      	str	r2, [r7, #88]	; 0x58
 80034e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe f841 	bl	800157e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003508:	b292      	uxth	r2, r2
 800350a:	1a8a      	subs	r2, r1, r2
 800350c:	b292      	uxth	r2, r2
 800350e:	4611      	mov	r1, r2
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003514:	e09a      	b.n	800364c <HAL_UART_IRQHandler+0x518>
 8003516:	bf00      	nop
 8003518:	08003883 	.word	0x08003883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808c 	beq.w	8003650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8087 	beq.w	8003650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003566:	647a      	str	r2, [r7, #68]	; 0x44
 8003568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800356c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3314      	adds	r3, #20
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	623b      	str	r3, [r7, #32]
   return(result);
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3314      	adds	r3, #20
 800359a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800359e:	633a      	str	r2, [r7, #48]	; 0x30
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e3      	bne.n	800357a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	617b      	str	r3, [r7, #20]
   return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e3      	bne.n	80035c0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003600:	4611      	mov	r1, r2
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003606:	e023      	b.n	8003650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_UART_IRQHandler+0x4f4>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f943 	bl	80038ac <UART_Transmit_IT>
    return;
 8003626:	e014      	b.n	8003652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_UART_IRQHandler+0x51e>
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f983 	bl	800394c <UART_EndTransmit_IT>
    return;
 8003646:	e004      	b.n	8003652 <HAL_UART_IRQHandler+0x51e>
    return;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_UART_IRQHandler+0x51e>
      return;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_UART_IRQHandler+0x51e>
      return;
 8003650:	bf00      	nop
  }
}
 8003652:	37e8      	adds	r7, #232	; 0xe8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003730:	b2db      	uxtb	r3, r3
 8003732:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b2db      	uxtb	r3, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <UART_InitCallbacksToDefault+0x4c>)
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0f      	ldr	r2, [pc, #60]	; (800379c <UART_InitCallbacksToDefault+0x50>)
 800375e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <UART_InitCallbacksToDefault+0x54>)
 8003764:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <UART_InitCallbacksToDefault+0x58>)
 800376a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <UART_InitCallbacksToDefault+0x5c>)
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <UART_InitCallbacksToDefault+0x60>)
 8003776:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <UART_InitCallbacksToDefault+0x64>)
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <UART_InitCallbacksToDefault+0x68>)
 8003782:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <UART_InitCallbacksToDefault+0x6c>)
 8003788:	669a      	str	r2, [r3, #104]	; 0x68

}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	0800366d 	.word	0x0800366d
 800379c:	08003659 	.word	0x08003659
 80037a0:	08003695 	.word	0x08003695
 80037a4:	08003681 	.word	0x08003681
 80037a8:	080036a9 	.word	0x080036a9
 80037ac:	080036bd 	.word	0x080036bd
 80037b0:	080036d1 	.word	0x080036d1
 80037b4:	080036e5 	.word	0x080036e5
 80037b8:	080036f9 	.word	0x080036f9

080037bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b095      	sub	sp, #84	; 0x54
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037e4:	643a      	str	r2, [r7, #64]	; 0x40
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	61fb      	str	r3, [r7, #28]
   return(result);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b01      	cmp	r3, #1
 8003832:	d119      	bne.n	8003868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	60bb      	str	r3, [r7, #8]
   return(result);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003854:	61ba      	str	r2, [r7, #24]
 8003856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	613b      	str	r3, [r7, #16]
   return(result);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003876:	bf00      	nop
 8003878:	3754      	adds	r7, #84	; 0x54
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b21      	cmp	r3, #33	; 0x21
 80038be:	d13e      	bne.n	800393e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d114      	bne.n	80038f4 <UART_Transmit_IT+0x48>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d110      	bne.n	80038f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]
 80038f2:	e008      	b.n	8003906 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	1c59      	adds	r1, r3, #1
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6211      	str	r1, [r2, #32]
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4619      	mov	r1, r3
 8003914:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003928:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003938:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b08c      	sub	sp, #48	; 0x30
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b22      	cmp	r3, #34	; 0x22
 8003990:	f040 80ad 	bne.w	8003aee <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	d117      	bne.n	80039ce <UART_Receive_IT+0x50>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d113      	bne.n	80039ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
 80039cc:	e026      	b.n	8003a1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d007      	beq.n	80039f2 <UART_Receive_IT+0x74>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <UART_Receive_IT+0x82>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e008      	b.n	8003a12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d15c      	bne.n	8003aea <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0220 	bic.w	r2, r2, #32
 8003a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d136      	bne.n	8003ade <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	613b      	str	r3, [r7, #16]
   return(result);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f023 0310 	bic.w	r3, r3, #16
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	623a      	str	r2, [r7, #32]
 8003a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	69f9      	ldr	r1, [r7, #28]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d10a      	bne.n	8003ace <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e003      	b.n	8003ae6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e002      	b.n	8003af0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b0c0      	sub	sp, #256	; 0x100
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	ea40 0301 	orr.w	r3, r0, r1
 8003b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <UART_SetConfig+0xa0>
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d104      	bne.n	8003ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff f936 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba0:	e003      	b.n	8003baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba2:	f7ff f91d 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 810c 	bne.w	8003dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bda:	4621      	mov	r1, r4
 8003bdc:	eb12 0801 	adds.w	r8, r2, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb43 0901 	adc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb49 0303 	adc.w	r3, r9, r3
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c26:	460b      	mov	r3, r1
 8003c28:	18db      	adds	r3, r3, r3
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	eb42 0303 	adc.w	r3, r2, r3
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c3c:	f7fc fade 	bl	80001fc <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c70:	4641      	mov	r1, r8
 8003c72:	eb12 0a01 	adds.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	4692      	mov	sl, r2
 8003c92:	469b      	mov	fp, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cd2:	f7fc fa93 	bl	80001fc <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cde:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d8e:	f7fc fa35 	bl	80001fc <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc0:	e106      	b.n	8003fd0 <UART_SetConfig+0x4d8>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003de2:	4642      	mov	r2, r8
 8003de4:	464b      	mov	r3, r9
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	6239      	str	r1, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	4641      	mov	r1, r8
 8003df4:	1854      	adds	r4, r2, r1
 8003df6:	4649      	mov	r1, r9
 8003df8:	eb43 0501 	adc.w	r5, r3, r1
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	00eb      	lsls	r3, r5, #3
 8003e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0a:	00e2      	lsls	r2, r4, #3
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	18e3      	adds	r3, r4, r3
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e18:	464b      	mov	r3, r9
 8003e1a:	eb45 0303 	adc.w	r3, r5, r3
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e3e:	4629      	mov	r1, r5
 8003e40:	008b      	lsls	r3, r1, #2
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e48:	4621      	mov	r1, r4
 8003e4a:	008a      	lsls	r2, r1, #2
 8003e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e50:	f7fc f9d4 	bl	80001fc <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	61b9      	str	r1, [r7, #24]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6139      	str	r1, [r7, #16]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb8:	464b      	mov	r3, r9
 8003eba:	460a      	mov	r2, r1
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003edc:	4649      	mov	r1, r9
 8003ede:	008b      	lsls	r3, r1, #2
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	008a      	lsls	r2, r1, #2
 8003eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eee:	f7fc f985 	bl	80001fc <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003efa:	fba3 2301 	umull	r2, r3, r3, r1
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2264      	movs	r2, #100	; 0x64
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	1acb      	subs	r3, r1, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	441c      	add	r4, r3
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	673b      	str	r3, [r7, #112]	; 0x70
 8003f22:	677a      	str	r2, [r7, #116]	; 0x74
 8003f24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	eb42 0303 	adc.w	r3, r2, r3
 8003f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	4641      	mov	r1, r8
 8003f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f96:	4641      	mov	r1, r8
 8003f98:	008a      	lsls	r2, r1, #2
 8003f9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f9e:	f7fc f92d 	bl	80001fc <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	; 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	3332      	adds	r3, #50	; 0x32
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4422      	add	r2, r4
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fdc:	51eb851f 	.word	0x51eb851f

08003fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	f107 001c 	add.w	r0, r7, #28
 8003fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d122      	bne.n	800403e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 faa2 	bl	800457c <USB_CoreReset>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e01a      	b.n	8004074 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa96 	bl	800457c <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
 8004066:	e005      	b.n	8004074 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10b      	bne.n	8004092 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f043 0206 	orr.w	r2, r3, #6
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409e:	b004      	add	sp, #16
 80040a0:	4770      	bx	lr

080040a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d115      	bne.n	8004112 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f7fd f90e 	bl	8001314 <HAL_Delay>
      ms++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa2e 	bl	8004560 <USB_GetMode>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d01e      	beq.n	8004148 <USB_SetCurrentMode+0x84>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b31      	cmp	r3, #49	; 0x31
 800410e:	d9f0      	bls.n	80040f2 <USB_SetCurrentMode+0x2e>
 8004110:	e01a      	b.n	8004148 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d115      	bne.n	8004144 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004124:	2001      	movs	r0, #1
 8004126:	f7fd f8f5 	bl	8001314 <HAL_Delay>
      ms++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa15 	bl	8004560 <USB_GetMode>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <USB_SetCurrentMode+0x84>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b31      	cmp	r3, #49	; 0x31
 8004140:	d9f0      	bls.n	8004124 <USB_SetCurrentMode+0x60>
 8004142:	e001      	b.n	8004148 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e005      	b.n	8004154 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b32      	cmp	r3, #50	; 0x32
 800414c:	d101      	bne.n	8004152 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800415c:	b084      	sub	sp, #16
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800416a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e009      	b.n	8004190 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3340      	adds	r3, #64	; 0x40
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3301      	adds	r3, #1
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b0e      	cmp	r3, #14
 8004194:	d9f2      	bls.n	800417c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d11c      	bne.n	80041d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
 80041d4:	e00b      	b.n	80041ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041f4:	461a      	mov	r2, r3
 80041f6:	2300      	movs	r3, #0
 80041f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	4619      	mov	r1, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	461a      	mov	r2, r3
 800420a:	680b      	ldr	r3, [r1, #0]
 800420c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10c      	bne.n	800422e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800421a:	2100      	movs	r1, #0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f965 	bl	80044ec <USB_SetDevSpeed>
 8004222:	e008      	b.n	8004236 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004224:	2101      	movs	r1, #1
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f960 	bl	80044ec <USB_SetDevSpeed>
 800422c:	e003      	b.n	8004236 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800422e:	2103      	movs	r1, #3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f95b 	bl	80044ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004236:	2110      	movs	r1, #16
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8f3 	bl	8004424 <USB_FlushTxFifo>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f91f 	bl	800448c <USB_FlushRxFifo>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e043      	b.n	800430a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004298:	d118      	bne.n	80042cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e013      	b.n	80042de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e008      	b.n	80042de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	461a      	mov	r2, r3
 80042fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3b7      	bcc.n	8004282 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e043      	b.n	80043a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800432a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800432e:	d118      	bne.n	8004362 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e013      	b.n	8004374 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e008      	b.n	8004374 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	2300      	movs	r3, #0
 8004372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	2300      	movs	r3, #0
 8004384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3301      	adds	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3b7      	bcc.n	8004318 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f043 0210 	orr.w	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <USB_DevInit+0x2c4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004410:	7dfb      	ldrb	r3, [r7, #23]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441c:	b004      	add	sp, #16
 800441e:	4770      	bx	lr
 8004420:	803c3800 	.word	0x803c3800

08004424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a13      	ldr	r2, [pc, #76]	; (8004488 <USB_FlushTxFifo+0x64>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e01b      	b.n	800447c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	daf2      	bge.n	8004432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	019b      	lsls	r3, r3, #6
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a08      	ldr	r2, [pc, #32]	; (8004488 <USB_FlushTxFifo+0x64>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e006      	b.n	800447c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d0f0      	beq.n	800445c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	00030d40 	.word	0x00030d40

0800448c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <USB_FlushRxFifo+0x5c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e018      	b.n	80044dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	daf2      	bge.n	8004498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2210      	movs	r2, #16
 80044ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <USB_FlushRxFifo+0x5c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e006      	b.n	80044dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d0f0      	beq.n	80044bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	00030d40 	.word	0x00030d40

080044ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004538:	f023 0303 	bic.w	r3, r3, #3
 800453c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0301 	and.w	r3, r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <USB_CoreReset+0x64>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e01b      	b.n	80045d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	daf2      	bge.n	8004588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <USB_CoreReset+0x64>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e006      	b.n	80045d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d0f0      	beq.n	80045b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	00030d40 	.word	0x00030d40

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	; (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	; (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	; (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	; (8004638 <__libc_init_array+0x44>)
 8004608:	f000 f818 	bl	800463c <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	08004684 	.word	0x08004684
 8004630:	08004684 	.word	0x08004684
 8004634:	08004684 	.word	0x08004684
 8004638:	08004688 	.word	0x08004688

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
